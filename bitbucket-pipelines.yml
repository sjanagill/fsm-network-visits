#  Template python-build

#  This template allows you to validate your python code.
#  The workflow allows running tests and code linting on the default branch.

image: python:3.8

pipelines:
  default:

    - step:
        name: Checkout code
        script:
          - git clone https://bitbucket.org/sonikaj/fsm-network-visits.git

    - step:
        name: Pre-deploy steps
        script:
          - rm /bin/sh && ln -s /bin/bash /bin/sh && apt-get update && apt-get install -y git
          - python3 -m venv .venv
          - source .venv/bin/activate
          - pip install --upgrade pip
          - export PYTHONPATH="${PYTHONPATH}:."

    - step:
        name: Install dependencies
        script:
          - bash install_requirements.sh

    - step:
        name: Run static code checks
        script:
          - bash run_linters.sh

          # - step:
          #   name: Run Pytests
          # image: hashicorp/terraform:latest
          # script:
          #- bash install_requirements.sh
          #- pip install pytest
          #- pytest cloud_functions/tests/

          #- step:
          #    name: Tests coverage
          #    image: alpine:latest
          #    script:
          #- bash install_requirements.sh
          #- bash coverage.sh

    - step:
        image: hashicorp/terraform:latest
        name: Deploy with Terraform
        # Requires Terraform CLI pre-installed
        script:
          - echo $SA_AUTH > credentials.json
          - chmod 777 credentials.json
          - export TF_VAR_project_id=$(grep GCP_PROJECT env.yaml | awk '{print $2}')
          - export TF_VAR_sa_account=$(grep SA_ACCOUNT env.yaml | awk '{print $2}')
          - terraform init
          - terraform fmt
          - terraform validate
          - terraform apply -auto-approve

#variables:
#  BITBUCKET_BUILD_NUMBER: $BITBUCKET_BUILD_NUMBER  # Replace with your variable name for build number (optional)
